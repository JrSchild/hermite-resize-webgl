/**
 * hermite-resize-webgl - The hermite-resize algorithm implemented in webgl.
 * @version 0.0.0
 * @link https://github.com/JrSchild/hermite-resize-webgl
 * @author Joram Ruitenschild
 * @license ISC
 */
function GLScale(t){return this instanceof GLScale?(this.precompile(t),this.scale.bind(this)):new GLScale(t)}GLScale.prototype.precompile=function(t){this.canvas=document.createElement("canvas"),this.canvas.width=t.width,this.canvas.height=t.height;var e={preserveDrawingBuffer:!0};if(this.gl=this.canvas.getContext("webgl",e)||this.canvas.getContext("experimental-webgl",e),!this.gl)throw new Error("Could not initialize webgl context");var i=GLScale.compileShader(this.gl,GLScale.Hermite.vertex,this.gl.VERTEX_SHADER),a=GLScale.compileShader(this.gl,GLScale.Hermite.fragment,this.gl.FRAGMENT_SHADER);this.program=GLScale.createProgram(this.gl,i,a),this.gl.useProgram(this.program),this.gl.bindTexture(this.gl.TEXTURE_2D,this.gl.createTexture()),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);var r=this.gl.getUniformLocation(this.program,"u_resolution");this.gl.uniform2f(r,this.canvas.width,this.canvas.height),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.gl.createBuffer());var o=this.gl.getAttribLocation(this.program,"a_position");this.gl.enableVertexAttribArray(o),this.gl.vertexAttribPointer(o,2,this.gl.FLOAT,!1,0,0)},GLScale.prototype.scale=function(t,e){if("string"==typeof t)return this.loadImage(t,function(t,i){return t?void 0:this.scale(i,e)});this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,t);var i=this.gl.getUniformLocation(this.program,"u_srcResolution");return this.gl.uniform2f(i,t.width,t.height),this.setRectangle(0,0,t.width,t.height),this.gl.drawArrays(this.gl.TRIANGLES,0,6),this.gl.finish(),this.canvas.toBlob=GLScale.toBlob,e&&e(this.canvas),this},GLScale.prototype.setRectangle=function(t,e,i,a){var r=t,o=t+i,l=e,g=e+a;this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([r,l,o,l,r,g,r,g,o,l,o,g]),this.gl.STATIC_DRAW)},GLScale.loadImage=function(t,e){var i=new Image;return i.onload=e.bind(this,null,i),i.onerror=e.bind(this),i.src=t,this},GLScale.prototype.loadImage=GLScale.loadImage,GLScale.toBlob=function(){var t=window.HTMLCanvasElement.prototype;return t.toBlob?t.toBlob:function(t,e,i){for(var a=atob(this.toDataURL(e,i).split(",")[1]),r=a.length,o=new Uint8Array(r),l=0;r>l;l++)o[l]=a.charCodeAt(l);t(new Blob([o],{type:e||"image/png"}))}}(),GLScale.compileShader=function(t,e,i){var a=t.createShader(i);if(t.shaderSource(a,e),t.compileShader(a),!t.getShaderParameter(a,t.COMPILE_STATUS))throw new Error("Could not compile shader: "+t.getShaderInfoLog(a));return a},GLScale.createProgram=function(t,e,i){var a=t.createProgram();if(t.attachShader(a,e),t.attachShader(a,i),t.linkProgram(a),!t.getProgramParameter(a,t.LINK_STATUS))throw"program filed to link:"+t.getProgramInfoLog(a);return a},GLScale.Hermite={vertex:"attribute vec2 a_position;uniform vec2 u_resolution;void main(){vec2 clipSpace=(a_position/u_resolution*2.)-1.;gl_Position=vec4(clipSpace*vec2(1,-1),0,1);}",fragment:"precision highp float;uniform sampler2D u_image;uniform vec2 u_resolution;uniform vec2 u_srcResolution;vec4 pixelsToTexture(vec2 loc){vec2 target=loc/u_srcResolution;target.y=1.-target.y;return texture2D(u_image,target);}void main(){vec2 ratio=u_srcResolution/u_resolution;vec2 ratioHalf=ceil(ratio/2.);vec2 loc=gl_FragCoord.xy;float x2=(loc.x+loc.y*u_resolution.x)*4.;float weight=0.;float weights=0.;float weights_alpha=0.;vec3 gx_rgb=vec3(0.);float gx_a=0.;float center_y=(loc.y+.5)*ratio.y;float yy=floor(loc.y*ratio.y);float yy_length=(loc.y+1.)*ratio.y;for(int yyy=0;yyy<5000;yyy++){if(yy>=yy_length){break;}float dy=abs(center_y-(yy+.5))/ratioHalf.y;float center_x=(loc.x+.5)*ratio.x;float w0=dy*dy;float xx=floor(loc.x*ratio.x);float xx_length=(loc.x+1.)*ratio.x;for(int xxx=0;xxx<5000;xxx++){if(xx>=xx_length){break;}float dx=abs(center_x-(xx+.5))/ratioHalf.x;float w=sqrt(w0+dx*dx);if(w>=-1.&&w<=1.){weight=2.*w*w*w-3.*w*w+1.;if(weight>0.){vec4 pixel=pixelsToTexture(vec2(xx,yy))*255.;gx_a+=weight*pixel.a;weights_alpha+=weight;if(pixel.a<255.){weight=weight*pixel.a/250.;}gx_rgb+=weight*pixel.rgb;weights+=weight;}}xx++;}yy++;}gx_rgb=(gx_rgb/weights)/255.;gx_a=(gx_a/weights_alpha)/255.;gl_FragColor=vec4(gx_rgb,gx_a);}"};